from tkinter import *
import tkinter as tk
import tkinter.filedialog as fd
from tkinter import filedialog, messagebox
import tkinter.messagebox as mb
import os
import shutil
from datetime import datetime



def open_file():
   file = fd.askopenfilename(title='Choose a file of any type', filetypes=[("All files", "*.*")])
   os.startfile(os.path.abspath(file))

def copy_file():
   file_to_copy = fd.askopenfilename(title='Choose a file to copy', filetypes=[("All files", "*.*")])
   dir_to_copy_to = fd.askdirectory(title="In which folder to copy to?")
   try:
       shutil.copy(file_to_copy, dir_to_copy_to)
       mb.showinfo(title='File copied!', message='Your desired file has been copied to your desired location')
   except:
       mb.showerror(title='Error!', message='We were unable to copy your file to the desired location. Please try again')

def delete_file():
   file = fd.askopenfilename(title='Choose a file to delete', filetypes=[("All files", "*.*")])
   os.remove(os.path.abspath(file))
   mb.showinfo(title='File deleted', message='Your desired file has been deleted')

def rename_file():

   file = fd.askopenfilename(title='Choose a file to rename', filetypes=[("All files", "*.*")])
   rename_wn = Toplevel(root)
   rename_wn.title("Rename the file to")
   rename_wn.geometry("250x70"); rename_wn.resizable(0, 0)
   Label(rename_wn, text='What should be the new name of the file?', font=("Times New Roman", 10)).place(x=0, y=0)
   new_name = Entry(rename_wn, width=40, font=("Times New Roman", 10))
   new_name.place(x=0, y=30)   #dialogue box
   new_file_name = os.path.join(os.path.dirname(file), new_name.get()+os.path.splitext(file)[1])
   os.rename(file, new_file_name)
   mb.showinfo(title="File Renamed", message='Your desired file has been renamed')


def sort_files():

    src_folder = filedialog.askdirectory(title="Select the source folder")
    dst_folder = filedialog.askdirectory(title="Select the destination folder")

    for filename in os.listdir(src_folder):
        file_path = os.path.join(src_folder, filename)
        if os.path.isfile(file_path):
            extension = os.path.splitext(filename)[1][1:]
            if extension:
                extension_folder = os.path.join(dst_folder, extension)
                if not os.path.exists(extension_folder):
                    os.makedirs(extension_folder)
                shutil.move(file_path, os.path.join(extension_folder, filename))

    root = tk.Tk()
    root.withdraw()
    tk.messagebox.showinfo(title="Done", message="Files sorted successfully.")

def merge_files():
    files=filedialog.askopenfilenames(title="Select files to merge");
    dst_file = filedialog.asksaveasfilename(title="Save merged file as", defaultextension=".merged")
    print(files)

    with open(dst_file, 'wb') as f:
        for file_path in files:
            with open(file_path, "rb") as src_f:
                f.write(src_f.read())
    root = tk.Tk()
    root.withdraw()

    tk.messagebox.showinfo(title="Done", message="Files merged successfully.")

# def merge_files():
#     file1 = filedialog.askopenfilenames(title="Select files to merge");
#     file2 = filedialog.askopenfilenames(title="Select files to merge");
#     output_file = filedialog.asksaveasfilename(title="Save merged file as", defaultextension=".merged")
#     with open(output_file, 'wb') as f:
#         for file in [file1, file2]:
#             with open(file, 'rb') as infile:
#                 shutil.copyfileobj(infile, f)
#     tk.messagebox.showinfo(title="Done", message=f"Merged files {file1} and {file2} into {output_file}")
#     # print(f"Merged files {file1} and {file2} into {output_file}")

def open_folder():
   folder = fd.askdirectory(title="Select Folder to open")
   os.startfile(folder)

def delete_folder():
   folder_to_delete = fd.askdirectory(title='Choose a folder to delete')
   os.rmdir(folder_to_delete)
   mb.showinfo("Folder Deleted", "Your desired folder has been deleted")


def move_folder():
   folder_to_move = fd.askdirectory(title='Select the folder you want to move')
   mb.showinfo(message='You just selected the folder to move, now please select the desired destination where you '
                       'want to move the folder to')
   destination = fd.askdirectory(title='Where to move the folder to')
   try:
       shutil.move(folder_to_move, destination)
       mb.showinfo("Folder moved", 'Your desired folder has been moved to the location you wanted')
   except:
       mb.showerror('Error', 'We could not move your folder. Please make sure that the destination exists')


def list_files_in_folder():
   i = 0
   folder = fd.askdirectory(title='Select the folder whose files you want to list')
   files = os.listdir(os.path.abspath(folder))
   list_files_wn = Toplevel(root)
   list_files_wn.title(f'Files in {folder}')
   list_files_wn.geometry('450x450')
   list_files_wn.resizable(0, 0)
   listbox = Listbox(list_files_wn, selectbackground='SteelBlue', font=("Georgia", 10))
   listbox.place(relx=0, rely=0, relheight=1, relwidth=1)
   scrollbar = Scrollbar(listbox, orient=VERTICAL, command=listbox.yview)
   scrollbar.pack(side=RIGHT, fill=Y)
   listbox.config(yscrollcommand=scrollbar.set)
   while i < len(files):
       listbox.insert(END, files[i])
       i += 1

def split_file():
    file_path = filedialog.askopenfilename(title="Select file to split")
    chunk_size = tk.simpledialog.askinteger("Chunk Size", "Enter chunk size in MB", minvalue=1)
    chunk_size *= 1024 * 1024
    file_name, file_extension = os.path.splitext(file_path)
    print(os.path.splitext(file_path))
    chunk_num = 1

    try:
        with open(file_path, "rb") as f:
            chunk = f.read(chunk_size)
            while chunk:
                chunk_file = f"{file_name}_{chunk_num}{file_extension}"
                with open(chunk_file, "wb") as chunk_f:
                    chunk_f.write(chunk)
                chunk_num += 1
                chunk = f.read(chunk_size)
    except:
        print("please select the file")
    root = tk.Tk()
    root.withdraw()
    tk.messagebox.showinfo(title="Done", message="File split successfully.")



def search_files(root_path, search_query, search_criteria):
    results = []
    for dirpath, dirnames, filenames in os.walk(root_path):
        for filename in filenames:
            if search_criteria == 'name':
                if search_query in filename:
                    results.append(os.path.join(dirpath, filename))
            elif search_criteria == 'extension':
                if search_query in filename.split('.')[-1]:
                    results.append(os.path.join(dirpath, filename))
            elif search_criteria == 'size':
                file_path = os.path.join(dirpath, filename)
                ans=os.path.getsize(file_path)*1024
                if ans <= int(search_query):
                    results.append(file_path)
            elif search_criteria == 'date_modified':
                file_path = os.path.join(dirpath, filename)
                modified_time = os.path.getmtime(file_path)
                modified_time = datetime.fromtimestamp(modified_time)
                if search_query in modified_time.strftime('%Y-%m-%d'):
                    results.append(file_path)
    return results

def Search():
    search_criteria_var = StringVar()
    search_query_var = StringVar()

    search_frame = Frame(root)
    search_frame.pack(fill=X)

    search_criteria_label = Label(search_frame, text='Search Criteria:')
    search_criteria_label.pack(side=LEFT, padx=5, pady=5)

    search_criteria_options = ['name', 'extension', 'size', 'date_modified']
    search_criteria_menu = OptionMenu(search_frame, search_criteria_var, *search_criteria_options)
    search_criteria_menu.pack(side=LEFT, padx=5, pady=5)

    search_query_label = Label(search_frame, text='Search Query:')
    search_query_label.pack(side=LEFT, padx=5, pady=5)

    search_query_entry = Entry(search_frame, textvariable=search_query_var)
    search_query_entry.pack(side=LEFT, padx=5, pady=5)

    # create search results window
    def search():
        search_results_window = Toplevel(root)
        search_results_window.title('Search Results')
        search_results_text = Text(search_results_window)
        search_results_text.pack(fill=BOTH, expand=True)

        current_path = fd.askdirectory(title="Select Folder to Search")
        search_criteria = search_criteria_var.get()
        search_query = search_query_var.get()
        if search_criteria == '' or search_query == '':
            messagebox.showerror('Error', 'Please select a search criteria and enter a search query.')
            return
        search_results = search_files(current_path, search_query, search_criteria)
        if len(search_results) == 0:
            messagebox.showinfo('Search Results', 'No results found.')
            return
        search_results_text.delete('1.0', 'end')
        for result in search_results:
            search_results_text.insert('end', result + '\n')

    search_button = Button(search_frame, text='Search', command=search)
    search_button.pack(side=LEFT, padx=5, pady=5)




# Defining the variables
title = 'File Manager'
background = '#00ffff'
button_font = ("Times New Roman", 13)
button_background ='#808080'
# Initializing the window
root = Tk()
root.title(title)
root.geometry('550x550')
root.resizable(0, 0)
root.config(bg='#FFFF45')

# Creating and placing the components in the window

Label(root, text=title, font=("Comic Sans MS", 15), bg='#EEEED5', wraplength=250).place(x=40, y=0)
Button(root, text='Open a file', width=20, font=button_font, bg=button_background, command=open_file).place(x=50, y=50)
Button(root, text='Copy a file', width=20, font=button_font, bg=button_background, command=copy_file).place(x=50, y=90)
Button(root, text='Rename a file', width=20, font=button_font, bg=button_background, command=rename_file).place(x=50, y=130)
Button(root, text='Delete a file', width=20, font=button_font, bg=button_background, command=delete_file).place(x=50, y=170)
Button(root, text='Open a folder', width=20, font=button_font, bg=button_background, command=open_folder).place(x=50, y=210)
Button(root, text='Delete a folder', width=20, font=button_font, bg=button_background, command=delete_folder).place(x=50, y=250)
Button(root, text='Move a folder', width=20, font=button_font, bg=button_background, command=move_folder).place(x=50, y=290)
Button(root, text='List all files in a folder', width=20, font=button_font, bg=button_background,command=list_files_in_folder).place(x=50, y=330)
Button(root,text='sort all the files',width=20,font=button_font,bg=button_background,command=sort_files).place(x=50,y=370)
Button(root,text='split the file',width=20,font=button_font,bg=button_background,command=split_file).place(x=50,y=410)
Button(root,text='merge files',width=20,font=button_font,bg=button_background,command=merge_files).place(x=50,y=450)
Button(root,text='Search_files',width=20,font=button_font,bg=button_background,command=Search).place(x=50,y=500)





# Finalizing the window
root.update()
root.mainloop()